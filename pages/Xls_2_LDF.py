import streamlit as st
import pandas as pd
from xlsx2ldf import ExcelToLDFConverter
import os
from datetime import datetime
import re
import logging
from logging.handlers import RotatingFileHandler


def setup_logging():
    """
    –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∂—É—Ä–Ω–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ—à–∏–±–æ–∫ –∏ –¥–µ–π—Å—Ç–≤–∏–π.
    –°–æ–∑–¥–∞–µ—Ç –∂—É—Ä–Ω–∞–ª –≤ –ø–∞–ø–∫–µ logs —Å —Ä–æ—Ç–∞—Ü–∏–µ–π —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π.
    """
    log_dir = "logs"
    os.makedirs(log_dir, exist_ok=True)
    
    log_format = "%(asctime)s - %(levelname)s - %(message)s"
    date_format = "%Y-%m-%d %H:%M:%S"
    
    logging.basicConfig(
        level=logging.INFO,
        format=log_format,
        datefmt=date_format,
        handlers=[
            RotatingFileHandler(
                filename=os.path.join(log_dir, "excel_to_ldf.log"),
                maxBytes=5 * 1024 * 1024,  # 5 MB
                backupCount=3
            )
        ]
    )

    console = logging.StreamHandler()
    console.setLevel(logging.INFO)
    formatter = logging.Formatter(log_format, date_format)
    console.setFormatter(formatter)
    logging.getLogger('').addHandler(console)


setup_logging()


st.set_page_config(
    page_title="Excel to LDF Converter",
    page_icon="üöó",
    layout="wide"
)

st.markdown("""
    <style>
    .main {
        background-color: #f5f5f5;
    }
    .stButton > button {
        background-color: #4CAF50;
        color: white;
        border-radius: 5px;
        padding: 10px 24px;
    }
    .stButton > button:hover {
        background-color: #45a049;
    }
    .stFileUploader > div > div > div > button {
        background-color: #2196F3;
        color: white;
    }
    .stTextInput > div > div > input {
        border-radius: 5px;
    }
    .title {
        color: #2c3e50;
    }
    </style>
""", unsafe_allow_html=True)


def extract_version_date(filename):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–æ–º–µ—Ä –≤–µ—Ä—Å–∏–∏ –∏ –¥–∞—Ç—É –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂ (version, date).
    """
    pattern = r"_V(\d+\.\d+\.\d+)_(\d{8})\."
    match = re.search(pattern, filename)
    if match:
        return match.group(1), match.group(2)
    return None, None


def generate_base_name(input_filename):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –±–µ–∑ –Ω–æ–º–µ—Ä–∞ –≤–µ—Ä—Å–∏–∏ –∏ –¥–∞—Ç—ã.
    """
    base_name = os.path.splitext(input_filename)[0]
    base_name = re.sub(r"_V\d+\.\d+\.\d+_\d{8}$", "", base_name)
    return base_name


def generate_default_output_filename(input_filename, new_version=None):
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –∏–º–µ–Ω–∏ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞.
    """
    base_name = generate_base_name(input_filename)
    current_date = datetime.now().strftime("%Y%m%d")
    
    if new_version is None:
        version, _ = extract_version_date(input_filename)
        new_version = version if version else "1.0.0"
    
    return f"{base_name}_V{new_version}_{current_date}.ldf"


def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ Streamlit.
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞, –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è.
    """
    st.markdown('<h1 class="title">üìÑ Excel to LDF Converter</h1>', unsafe_allow_html=True)
    st.markdown("–ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel-—Ñ–∞–π–ª, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –¥–∞–Ω–Ω—ã–µ LIN, –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ LDF-—Ñ–∞–π–ª.")

    col1, col2 = st.columns([3, 1])

    with col1:
        uploaded_file = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ Excel-—Ñ–∞–π–ª", type=["xls", "xlsx"], key="file_uploader")
        
        if uploaded_file is not None:
            try:
                df = pd.read_excel(uploaded_file, sheet_name="Matrix")
                st.subheader("–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö")
                st.dataframe(df.head().style.set_properties(**{
                    'background-color': '#f0f2f6',
                    'color': '#2c3e50',
                    'border': '1px solid #dfe6e9'
                }))
            except Exception as e:
                st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ Excel-—Ñ–∞–π–ª–∞: {str(e)}")
                return

    with col2:
        if uploaded_file is not None:
            st.subheader("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—ã–≤–æ–¥–∞")
            
            version, _ = extract_version_date(uploaded_file.name)
            default_version = version if version else "1.0.0"
            
            new_version = st.text_input(
                "–í–µ—Ä—Å–∏—è LDF",
                value=default_version,
                help="–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–µ—Ä—Å–∏–∏ —Ñ–æ—Ä–º–∞—Ç–∞ X.X.X"
            )
            
            base_name = generate_base_name(uploaded_file.name)
            
            default_output_name = generate_default_output_filename(uploaded_file.name, new_version)
            custom_filename = st.text_input(
                "–ò–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ LDF-—Ñ–∞–π–ª–∞",
                value=default_output_name,
                help="–í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"
            )
            
            if not custom_filename.lower().endswith('.ldf'):
                custom_filename += '.ldf'
                
            st.markdown("**–ò—Ç–æ–≥–æ–≤–æ–µ –∏–º—è LDF-—Ñ–∞–π–ª–∞:**")
            st.code(custom_filename)
            
            if st.button("–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ LDF"):
                with st.spinner('–í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ LDF... –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ'):
                    try:
                        converter = ExcelToLDFConverter(uploaded_file)
                        
                        if converter.convert(custom_filename):
                            st.success("–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!")
                            
                            with open(custom_filename, "rb") as f:
                                bytes_data = f.read()
                                st.download_button(
                                    label="–°–∫–∞—á–∞—Ç—å LDF-—Ñ–∞–π–ª",
                                    data=bytes_data,
                                    file_name=custom_filename,
                                    mime="application/octet-stream",
                                    key="download_button"
                                )
                        else:
                            st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
                    except Exception as e:
                        st.error(f"–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è: {str(e)}")


if __name__ == "__main__":
    main()